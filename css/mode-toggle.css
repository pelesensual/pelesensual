// Modal Toggle System
const ModalToggle = {
    // Configurações
    config: {
        modalClass: 'image-modal',
        activeClass: 'active',
        modalOpenClass: 'modal-open',
        zoomIconClass: 'zoom-icon',
        productImageClass: 'product-image'
    },

    // Estado
    state: {
        currentModal: null,
        isAnimating: false
    },

    // Inicialização
    init() {
        this.setupImageZoom();
        this.setupEventListeners();
    },

    // Configurar zoom de imagem
    setupImageZoom() {
        const productImages = document.querySelectorAll(`.${this.config.productImageClass}`);
        
        productImages.forEach(image => {
            // Criar container para a imagem se necessário
            this.setupImageContainer(image);
            
            // Adicionar ícone de zoom
            this.addZoomIcon(image);
            
            // Adicionar eventos
            this.addImageEvents(image);
        });
    },

    // Configurar container da imagem
    setupImageContainer(image) {
        if (!image.parentElement.classList.contains('product-image-container')) {
            const container = document.createElement('div');
            container.className = 'product-image-container';
            image.parentNode.insertBefore(container, image);
            container.appendChild(image);
        }
    },

    // Adicionar ícone de zoom
    addZoomIcon(image) {
        if (!image.parentElement.querySelector(`.${this.config.zoomIconClass}`)) {
            const zoomIcon = document.createElement('div');
            zoomIcon.className = this.config.zoomIconClass;
            zoomIcon.innerHTML = '<i class="fas fa-search-plus"></i>';
            image.parentElement.appendChild(zoomIcon);
        }
    },

    // Adicionar eventos à imagem
    addImageEvents(image) {
        const container = image.parentElement;
        const zoomIcon = container.querySelector(`.${this.config.zoomIconClass}`);

        // Evento para o ícone de zoom
        zoomIcon.addEventListener('click', (e) => {
            e.stopPropagation();
            this.openImageModal(image);
        });

        // Evento para a imagem
        image.addEventListener('click', (e) => {
            e.stopPropagation();
            if (!e.target.closest('.add-to-cart')) {
                this.openImageModal(image);
            }
        });
    },

    // Abrir modal de imagem
    openImageModal(image) {
        if (this.state.isAnimating) return;

        const modal = document.querySelector(`.${this.config.modalClass}`);
        if (!modal) return;

        this.state.isAnimating = true;
        this.state.currentModal = modal;

        // Preparar imagens para o modal
        const productId = this.getProductId(image);
        const images = this.getProductImages(productId, image.src);
        
        this.setupModalContent(modal, images);
        
        // Abrir modal
        document.body.classList.add(this.config.modalOpenClass);
        modal.classList.add(this.config.activeClass);

        setTimeout(() => {
            this.state.isAnimating = false;
        }, 300);
    },

    // Configurar conteúdo do modal
    setupModalContent(modal, images) {
        const mainImage = modal.querySelector('.modal-main-image');
        const thumbnailsContainer = modal.querySelector('.modal-thumbnails');

        // Configurar imagem principal
        mainImage.src = images[0];

        // Configurar miniaturas
        thumbnailsContainer.innerHTML = images.map((src, index) => `
            <div class="modal-thumbnail ${index === 0 ? 'active' : ''}" data-index="${index}">
                <img src="${src}" alt="Miniatura ${index + 1}">
            </div>
        `).join('');

        // Adicionar eventos às miniaturas
        this.setupThumbnailEvents(modal);
    },

    // Configurar eventos das miniaturas
    setupThumbnailEvents(modal) {
        const thumbnails = modal.querySelectorAll('.modal-thumbnail');
        const mainImage = modal.querySelector('.modal-main-image');

        thumbnails.forEach(thumbnail => {
            thumbnail.addEventListener('click', (e) => {
                e.stopPropagation();
                const index = thumbnail.dataset.index;
                mainImage.src = thumbnail.querySelector('img').src;
                
                thumbnails.forEach(t => t.classList.remove('active'));
                thumbnail.classList.add('active');
            });
        });
    },

    // Obter ID do produto
    getProductId(image) {
        const productCard = image.closest('.product-card');
        if (productCard) {
            const addToCartButton = productCard.querySelector('.add-to-cart');
            return addToCartButton ? addToCartButton.dataset.id : null;
        }
        return null;
    },

    // Obter imagens do produto
    getProductImages(productId, defaultImage) {
        // Se não houver ID do produto, retornar apenas a imagem atual
        if (!productId) return [defaultImage];

        // Aqui você pode implementar a lógica para buscar todas as imagens do produto
        // Por enquanto, retornamos apenas a imagem atual
        return [defaultImage];
    },

    // Configurar event listeners globais
    setupEventListeners() {
        document.addEventListener('click', (e) => {
            if (this.state.currentModal && !e.target.closest('.modal-content')) {
                this.closeCurrentModal();
            }
        });

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.state.currentModal) {
                this.closeCurrentModal();
            }
        });
    },

    // Fechar modal atual
    closeCurrentModal() {
        if (!this.state.currentModal || this.state.isAnimating) return;

        this.state.isAnimating = true;
        this.state.currentModal.classList.remove(this.config.activeClass);
        document.body.classList.remove(this.config.modalOpenClass);

        setTimeout(() => {
            this.state.isAnimating = false;
            this.state.currentModal = null;
        }, 300);
    }
};

// Inicializar quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    ModalToggle.init();
});
