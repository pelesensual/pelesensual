// Modal Toggle System
const ModalToggle = {
    config: {
        productImageClass: 'product-image',
        zoomIconClass: 'zoom-icon',
        modalClass: 'image-modal',
        activeClass: 'active',
        modalOpenClass: 'modal-open'
    },

    state: {
        currentModal: null,
        isAnimating: false,
        isZooming: false
    },

    init() {
        this.setupImageZoom();
        this.setupEventListeners();
    },

    setupImageZoom() {
        const productImages = document.querySelectorAll(`.${this.config.productImageClass}`);
        
        productImages.forEach(image => {
            // Criar container para a imagem
            const container = document.createElement('div');
            container.className = 'product-image-container';
            image.parentNode.insertBefore(container, image);
            container.appendChild(image);

            // Adicionar ícone de lupa
            const zoomIcon = document.createElement('div');
            zoomIcon.className = this.config.zoomIconClass;
            zoomIcon.innerHTML = '<i class="fas fa-search-plus"></i>';
            container.appendChild(zoomIcon);

            // Eventos do zoom
            this.setupZoomEvents(container, image, zoomIcon);
        });
    },

    setupZoomEvents(container, image, zoomIcon) {
        // Remover qualquer evento de clique direto na imagem
        image.style.cursor = 'default';
        
        // Eventos apenas para o ícone de zoom
        zoomIcon.addEventListener('mouseenter', () => {
            zoomIcon.style.cursor = 'zoom-in';
            this.state.isZooming = true;
        });

        zoomIcon.addEventListener('mouseleave', () => {
            this.state.isZooming = false;
        });

        zoomIcon.addEventListener('click', (e) => {
            e.stopPropagation();
            if (this.state.isZooming) {
                this.openImageModal(image);
            }
        });

        // Prevenir qualquer outro comportamento de zoom
        container.addEventListener('click', (e) => {
            if (!this.state.isZooming) {
                e.stopPropagation();
            }
        });
    },

    openImageModal(image) {
        if (this.state.isAnimating) return;

        const modal = document.querySelector(`.${this.config.modalClass}`);
        if (!modal) return;

        this.state.isAnimating = true;
        this.state.currentModal = modal;

        const productId = this.getProductId(image);
        const images = this.getProductImages(productId, image.src);
        
        this.setupModalContent(modal, images);
        
        document.body.classList.add(this.config.modalOpenClass);
        modal.classList.add(this.config.activeClass);

        setTimeout(() => {
            this.state.isAnimating = false;
        }, 300);
    },

    setupModalContent(modal, images) {
        const mainImage = modal.querySelector('.modal-main-image');
        const thumbnailsContainer = modal.querySelector('.modal-thumbnails');

        mainImage.src = images[0];

        thumbnailsContainer.innerHTML = images.map((src, index) => `
            <div class="modal-thumbnail ${index === 0 ? 'active' : ''}" data-index="${index}">
                <img src="${src}" alt="Miniatura ${index + 1}">
            </div>
        `).join('');

        this.setupThumbnailEvents(modal);
    },

    setupThumbnailEvents(modal) {
        const thumbnails = modal.querySelectorAll('.modal-thumbnail');
        const mainImage = modal.querySelector('.modal-main-image');

        thumbnails.forEach(thumbnail => {
            thumbnail.addEventListener('click', (e) => {
                e.stopPropagation();
                const index = thumbnail.dataset.index;
                mainImage.src = thumbnail.querySelector('img').src;
                
                thumbnails.forEach(t => t.classList.remove('active'));
                thumbnail.classList.add('active');
            });
        });
    },

    getProductId(image) {
        const productCard = image.closest('.product-card');
        return productCard?.querySelector('.add-to-cart')?.dataset.id || null;
    },

    getProductImages(productId, defaultImage) {
        // Implementar lógica de múltiplas imagens aqui
        return [defaultImage];
    },

    setupEventListeners() {
        document.addEventListener('click', (e) => {
            if (this.state.currentModal && !e.target.closest('.modal-content')) {
                this.closeCurrentModal();
            }
        });

        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.state.currentModal) {
                this.closeCurrentModal();
            }
        });
    },

    closeCurrentModal() {
        if (!this.state.currentModal || this.state.isAnimating) return;

        this.state.isAnimating = true;
        this.state.currentModal.classList.remove(this.config.activeClass);
        document.body.classList.remove(this.config.modalOpenClass);

        setTimeout(() => {
            this.state.isAnimating = false;
            this.state.currentModal = null;
        }, 300);
    }
};

// CSS correspondente
const style = document.createElement('style');
style.textContent = `
    .product-image-container {
        position: relative;
        display: inline-block;
    }

    .zoom-icon {
        position: absolute;
        top: 10px;
        right: 10px;
        width: 30px;
        height: 30px;
        background: rgba(255, 255, 255, 0.8);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
        z-index: 2;
    }

    .product-image-container:hover .zoom-icon {
        opacity: 1;
    }

    .zoom-icon:hover {
        cursor: zoom-in;
        background: rgba(255, 255, 255, 0.9);
    }

    .product-image {
        display: block;
        max-width: 100%;
        height: auto;
    }
`;
document.head.appendChild(style);

// Inicializar quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
    ModalToggle.init();
});
